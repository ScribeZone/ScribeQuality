qa model JavaCheckStyle

rule JavaAbbreviationAsWordInName:
    | The Check validate abbreviations(consecutive capital letters) length in identifier name, it also allow in enforce camel case naming.


rule JavaAbstractClassName:
    | Ensures that the names of abstract classes conforming to some regular expression.


rule JavaAnnotationLocation:
    | Check location of annotation on language elements.


rule JavaAnnotationUseStyle:
    | This check controls the style with the usage of annotations.


rule JavaAnonInnerLength:
    | Checks for long anonymous inner classes.


rule JavaArrayTrailingComma:
    | Checks if array initialization contains optional trailing comma.


rule JavaArrayTypeStyle:
    | Checks the style of array type definitions.


rule JavaAtclauseOrder:
    | Checks the order of at-clauses.


rule JavaAvoidEscapedUnicodeCharacters:
    | Restrict using Unicode escapes.


rule JavaAvoidInlineConditionals:
    | Detects inline conditionals.


rule JavaAvoidNestedBlocks:
    | Finds nested blocks.


rule JavaAvoidStarImport:
    | Check that finds import statements that use the * notation.


rule JavaAvoidStaticImport:
    | Check that finds static imports.


rule JavaBooleanExpressionComplexity:
    | Restricts nested boolean operators (&&, ||, &, | and ^) to a specified depth (default = 3).


rule JavaClassDataAbstractionCoupling:
    | This metric measures the number of instantiations of other classes within the given class.


rule JavaClassFanOutComplexity:
    | The number of other classes a given class relies on.


rule JavaClassTypeParameterName:
    | Checks that class type parameter names conform to a format specified by the format property.


rule JavaConstantName:
    | Checks that constant names conform to a format specified by the format property.


rule JavaCovariantEquals:
    | Checks that if a class defines a covariant method equals, then it defines method equals(java.lang.Object).


rule JavaCustomImportOrder:
    | Checks that the groups of import declarations appear in the order specified by the user.


rule JavaCyclomaticComplexity:
    | Checks cyclomatic complexity against a specified limit.


rule JavaDeclarationOrder:
    | Checks that the parts of a class or interface declaration appear in the order suggested by the Code Conventions for the Java Programming Language 


rule JavaDefaultComesLast:
    | Check that the default is after all the cases in a switch statement.


rule JavaDescendantToken:
    | Checks for restricted tokens beneath other tokens.


rule JavaDesignForExtension:
    | Checks that classes are designed for inheritance.


rule JavaEmptyBlock:
    | Checks for empty blocks.


rule JavaEmptyForInitializerPad:
    | Checks the padding of an empty for initializer; that is whether a space is required at an empty for initializer, or such spaces are forbidden.


rule JavaEmptyForIteratorPad:
    | Checks the padding of an empty for iterator; that is whether a space is required at an empty for iterator, or such spaces are forbidden.


rule JavaEmptyLineSeparator:
    | Checks for blank line separators.


rule JavaEmptyStatement:
    | Detects empty statements (standalone ';').


rule JavaEqualsAvoidNull:
    | Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.


rule JavaEqualsHashCode:
    | Checks that classes that override equals() also override hashCode().


rule JavaExecutableStatementCount:
    | Restricts the number of executable statements to a specified limit (default = 30).


rule JavaExplicitInitialization:
    | Checks if any class or object member explicitly initialized to default for its type value (null for object references, zero for numeric types and char and false for boolean.


rule JavaFallThrough:
    | Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a break, return, throw or continue statement.


rule JavaFileLength:
    | Checks for long source files.


rule JavaFileTabCharacter:
    | Checks to see if a file contains a tab character.


rule JavaFinalClass:
    | Checks that class which has only private ctors is declared as final.


rule JavaFinalLocalVariable:
    | Ensures that local variables that never get their values changed, must be declared final.


rule JavaFinalParameters:
    | Check that method/constructor/catch/foreach parameters are final.


rule JavaGenericWhitespace:
    | Checks that the whitespace around the Generic tokens < and > are correct to the typical convention.


rule JavaHeader:
    | Checks the header of the source against a fixed header file.


rule JavaHiddenField:
    | Checks that a local variable or a parameter does not shadow a field that is defined in the same class.


rule JavaHideUtilityClassConstructor:
    | Make sure that utility classes (classes that contain only static methods) do not have a public constructor.


rule JavaIllegalCatch:
    | Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.


rule JavaIllegalImport:
    | Checks for imports from a set of illegal packages.


rule JavaIllegalInstantiation:
    | Checks for illegal instantiations where a factory method is preferred.


rule JavaIllegalThrows:
    | Throwing java.lang.Error or java.lang.RuntimeException is almost never acceptable.


rule JavaIllegalToken:
    | Checks for illegal tokens.


rule JavaIllegalTokenText:
    | Checks for illegal token text.


rule JavaIllegalType:
    | Checks that particular class are never used as types in variable declarations, return values or parameters.


rule JavaImportControl:
    | Check that controls what packages can be imported in each package.


rule JavaImportOrder:
    | Ensures that groups of imports come in a specific order.


rule JavaIndentation:
    | Checks correct indentation of Java Code.


rule JavaInnerAssignment:
    | Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.


rule JavaInnerTypeLast:
    | Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations.


rule JavaInterfaceIsType:
    | Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.


rule JavaInterfaceTypeParameterName:
    | Checks that interface type parameter names conform to a format specified by the format property.


rule JavaJavaNCSS:
    | This check calculates the Non Commenting Source Statements (NCSS) metric for Java source files and methods.


rule JavaJavadocMethod:
    | Checks the Javadoc of a method or constructor.


rule JavaJavadocPackage:
    | Checks that all packages have a package documentation.


rule JavaJavadocTagContinuationIndentation:
    | Checks the indentation of the continuation lines in at-clauses.


rule JavaJavadocParagraph:
    | Checks Javadoc paragraphs.


rule JavaJavadocStyle:
    | Custom Checkstyle Check to validate Javadoc.


rule JavaJavadocType:
    | Checks the Javadoc of a type.


rule JavaJavadocVariable:
    | Checks that a variable has Javadoc comment.


rule JavaLeftCurly:
    | Checks the placement of left curly braces on types, methods and other blocks:


rule JavaLineLength:
    | Checks for long lines.


rule JavaLocalFinalVariableName:
    | Checks that local final variable names conform to a format specified by the format property.


rule JavaLocalVariableName:
    | Checks that local, non-final variable names conform to a format specified by the format property.


rule JavaMagicNumber:
    | Checks for magic numbers.


rule JavaMemberName:
    | Checks that instance variable names conform to a format specified by the format property.


rule JavaMethodCount:
    | Checks the number of methods declared in each type.


rule JavaMethodLength:
    | Checks for long methods.


rule JavaMethodName:
    | Checks that method names conform to a format specified by the format property.


rule JavaMethodParamPad:
    | Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list.


rule JavaMethodTypeParameterName:
    | Checks that class type parameter names conform to a format specified by the format property.


rule JavaMissingCtor:
    | Checks that classes (except abstract one) define a ctor and don't rely on the default one.


rule JavaMissingDeprecated:
    | This class is used to verify that both the


rule JavaMissingOverride:
    | This class is used to verify that the


rule JavaMissingSwitchDefault:
    | Checks that switch statement has "default" clause.


rule JavaModifiedControlVariable:
    | Check for ensuring that for loop control variables are not modified inside the for block.


rule JavaModifierOrder:
    | Checks that the order of modifiers conforms to the suggestions in the Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3.


rule JavaMultipleStringLiterals:
    | Checks for multiple occurrences of the same string literal within a single file.


rule JavaMultipleVariableDeclarations:
    | Checks that each variable declaration is in its own statement and on its own line.


rule JavaMutableException:
    | Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable.


rule JavaNPathComplexity:
    | Checks the npath complexity against a specified limit (default = 200).


rule JavaNeedBraces:
    | Checks for braces around code blocks.


rule JavaNestedForDepth:
    | Restricts nested for blocks to a specified depth (default = 1).


rule JavaNestedIfDepth:
    | Restricts nested if-else blocks to a specified depth (default = 1).


rule JavaNestedTryDepth:
    | Restricts nested try-catch-finally blocks to a specified depth (default = 1).


rule JavaNewlineAtEndOfFile:
    | Checks that there is a newline at the end of each file.


rule JavaNoClone:
    | Checks that the clone method is not overridden from the Object class.


rule JavaNoFinalizer:
    | Checks that no method having zero parameters is defined using the name finalize.


rule JavaNonEmptyAtclauseDescription:
    | Checks that the at-clause tag is followed by description .


rule JavaNoLineWrap:
    | Checks that chosen statements are not line-wrapped.


rule JavaNoWhitespaceAfter:
    | Checks that there is no whitespace after a token.


rule JavaNoWhitespaceBefore:
    | Checks that there is no whitespace before a token.


rule JavaOneStatementPerLine:
    | Checks there is only one statement per line.


rule JavaOneTopLevelClass:
    | Checks that each top-level class, interfaces or enum resides in a source file of its own.


rule JavaOperatorWrap:
    | Checks line wrapping for operators.


rule JavaOuterTypeFilename:
    | Checks that the outer type name and the file name match.


rule JavaOuterTypeNumber:
    | Checks for the number of defined types at the "outer" level.


rule JavaPackageAnnotation:
    | This check makes sure that all package annotations are in the package-info.java file.


rule JavaPackageDeclaration:
    | Ensures there is a package declaration and (optionally) in the correct directory.


rule JavaPackageName:
    | Checks that package names conform to a format specified by the format property.


rule JavaParameterAssignment:
    | Disallow assignment of parameters.


rule JavaParameterName:
    | Checks that parameter names conform to a format specified by the format property.


rule JavaParameterNumber:
    | Checks the number of parameters that a method or constructor has.


rule JavaParenPad:
    | Checks the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden, with the exception that it does not check for padding of the right parenthesis at an empty for iterator.


rule JavaRedundantImport:
    | Checks for imports that are redundant.


rule JavaRedundantModifier:
    | Checks for redundant modifiers in interface and annotation definitions.


rule JavaRegexp:
    | A check that makes sure that a specified pattern exists (or not) in the file.


rule JavaRegexpHeader:
    | Checks the header of the source against a header file that contains a


rule JavaRegexpMultiline:
    | Implementation of a check that looks that matches across multiple lines in any file type.


rule JavaRegexpSingleline:
    | Implementation of a check that looks for a single line in any file type.


rule JavaRegexpSinglelineJava:
    | Implementation of a check that looks for a single line in Java files.


rule JavaRequireThis:
    | Checks that code doesn't rely on the "this" default.


rule JavaReturnCount:
    | Restricts return statements to a specified count (default = 2).


rule JavaRightCurly:
    | Checks the placement of right curly braces.


rule JavaSeparatorWrap:
    | Checks line wrapping with separators.


rule JavaSingleLineJavadoc:
    | Checks that a JavaDoc block which can fit on a single line and doesn't contain at-clauses


rule JavaSimplifyBooleanExpression:
    | Checks for overly complicated boolean expressions.


rule JavaSimplifyBooleanReturn:
    | Checks for overly complicated boolean return statements.


rule JavaStaticVariableName:
    | Checks that static, non-final variable names conform to a format specified by the format property.


rule JavaStringLiteralEquality:
    | Checks that string literals are not used with == or !=.


rule JavaSummaryJavadoc:
    | Checks that Javadoc summary sentence does not contain phrases that are not recommended to use.


rule JavaSuperClone:
    | Checks that an overriding clone() method invokes super.clone().


rule JavaSuperFinalize:
    | Checks that an overriding finalize() method invokes super.finalize().


rule JavaSuppressWarnings:
    | This check allows you to specify what warnings that


rule JavaSuppressWarningsHolder:
    | This check allows for finding code that should not be reported by Checkstyle


rule JavaThrowsCount:
    | Restricts throws statements to a specified count (default = 1).


rule JavaTodoComment:
    | A check for TODO comments.


rule JavaTrailingComment:
    | The check to ensure that requires that comments be the only thing on a line.


rule JavaTranslation:
    | The TranslationCheck class helps to ensure the correct translation of code by checking property files for consistency regarding their keys.


rule JavaTypeName:
    | Checks that type names conform to a format specified by the format property.


rule JavaTypecastParenPad:
    | Checks the padding of parentheses for typecasts.


rule JavaUncommentedMain:
    | Detects uncommented main methods.


rule JavaUniqueProperties:
    | Detects duplicated keys in properties files.


rule JavaUnnecessaryParentheses:
    | Checks if unnecessary parentheses are used in a statement or expression.


rule JavaUnusedImports:
    | Checks for unused import statements.


rule JavaUpperEll:
    | Checks that long constants are defined with an upper ell.


rule JavaVariableDeclarationUsageDistance:
    | Checks the distance between declaration of variable and its first usage.


rule JavaVisibilityModifier:
    | Checks visibility of class members.


rule JavaWhitespaceAfter:
    | Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator.


rule JavaWhitespaceAround:
    | Checks that a token is surrounded by whitespace.


rule JavaWriteTag:
    | Outputs a JavaDoc tag as information.


