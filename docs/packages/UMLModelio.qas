qa model UMLModelio

rule ModelioR1000:
    | A Model Element cannot abstract itself.
rule ModelioR1010:
    | The top Partitions of an Activity must not have a Super-Partition.
rule ModelioR1020:
    | The source and the target of a Flow must be contained in the same Structured Activity Node.
rule ModelioR1030:
    | The source and the target of a Flow must be owned by the same Activity.
rule ModelioR1040:
    | An Activity Parameter Node must be represeneted by a Behavior Parameter owned by the same Activity.
rule ModelioR1050:
    | An Activity Parameter Node cannot have both incoming and outgoing edges.
rule ModelioR1060:
    | Activity Parameter Nodes with no incoming flow and one or more outgoing flow must have a Behavior Parameter with “In” or “In/Out” parameter passing mode.
rule ModelioR1070:
    | Activity Parameter Nodes with no outgoing flow and one or more incoming flow must have a Behavior Parameter with “Out” or “In/Out” parameter passing mode.
rule ModelioR1080:
    | All Partitions of the same nesting level must represent Parts of the same Classifier.
rule ModelioR1090:
    | If a Sub-Partition is non-external and represents a Classifier then the represented Classifier must be nested in the Classifier represented by its Super-Partition or be the extremity of a Composition with the latter.
rule ModelioR1100:
    | If a Sub-Partition represents a Part nested in a Classifier then its Super-Partition must represent the Classifier or an instance of the latter.
rule ModelioR1110:
    | There must be one to one correspondence between: (A) the Pins of a Call Behavior Action, and (B) the In, Out, InOut or Return Behavior Parameters of the called Behaviour.
rule ModelioR1130:
    | The type and the maximum cardinality of a Call Action'’s Pin must match the type and max multiplicity of the represented Parameter.
rule ModelioR1140:
    | There must be one to one correspondence between: (A) the Pins of a Call Operation Action, and (B) the In, Inout, Out and Return parameters of the called Operation.
rule ModelioR1150:
    | The Call Operation Action or Send Signal Action has more than one target Pin.
rule ModelioR1160:
    | A target Pin can only be owned by Call Operation Actions and Send Signal Actions
rule ModelioR1170:
    | The type of the target Pin must be the same as the type that owns the Operation.
rule ModelioR1180:
    | Control Flows may not have Object Nodes at either end, except for Object Nodes with control type.
rule ModelioR1190:
    | The Decision-Merge Node is used both as a Decision node and as a Merge node at the same time.
rule ModelioR1200:
    | The edges coming into and out of a Decision Merge Node must be either all Object Flows or all Control Flows.
rule ModelioR1230:
    | Only Control Flows can have Initial Nodes as their source.
rule ModelioR1250:
    | If a Fork/Join Node has an Object Flow in its incoming edges, it must have an Object Flow in its outgoing edges and vice versa. The same applies for Control Flows.
rule ModelioR1280:
    | Object Flows may not have Actions at either end.
rule ModelioR1290:
    | Object Nodes connected by an Object Flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream Object Node type must be the same or a super type of the upstream Object Node type.
rule ModelioR1300:
    | Object Nodes connected by an Object Flow, with optionally intervening control nodes, must have the same upper bounds.
rule ModelioR1310:
    | An edge with constant weight may not target an Object Node, or lead to an Object Node downstream with no intervening actions and with an upper bound less than the weight.
rule ModelioR1320:
    | An Object Flow must not be simultaneusly multi-cast and multi-receive.
rule ModelioR1350:
    | If an Object Node has a ‘'Selection behavior’‘, then the ’‘Ordering’‘ of the Object Node is ordered and vice versa.
rule ModelioR1360:
    | Input Pins may have outgoing edges only when both the following conditions are met: (1) they are on Actions that are Structured Nodes, and (2) these edges must target a Node contained by the Structured Node.
rule ModelioR1370:
    | Output Pins may have incoming edges only when both the following conditions are met: (1) they are on Actions that are Structured Nodes, and (2) these edges must come from a node contained by the Structured Node.
rule ModelioR1380:
    | There must be one to one correspondence between: (A) the Pins of a Send Signal Action, and (B) the attributes of the sent Signal.
rule ModelioR1390:
    | The max cardinality of an argument Pin must be the same as for the represented Attribute.
rule ModelioR1400:
    | An Activity Parameter Node can only belong to an Activity.
rule ModelioR1410:
    | Only one Association End of an Association can be aggregate or composite.
rule ModelioR1420:
    | Actors and UseCases can only have binary Associations.
rule ModelioR1430:
    | Multiplicities of an AssociationEnd must be consistent: MultiplicityMin cannot be ‘*’ and MultiplicityMin must be inferior to MultiplicityMax.
rule ModelioR1440:
    | AssociationEnds cannot be composite on n-ary Associations.
rule ModelioR1450:
    | If an association is a composition, then the opposite maximum multiplicity must be 1.
rule ModelioR1460:
    | A public association oriented from a public Classifier cannot be linked to a private or protected Classifier.
rule ModelioR1470:
    | The name of an AssociationEnd’s qualifiers must be unique.
rule ModelioR1480:
    | An Attribute must be typed by a primitive type.
rule ModelioR1490:
    | In an instance, the type of an instantiated attribute must be in the instantiated class or in its parent classes.
rule ModelioR1500:
    | In an instance, the name of an instantiated attribute must be the same as the corresponding attribute.
rule ModelioR1520:
    | The name of a BindableInstance must be unique in it Classifier.
rule ModelioR1530:
    | An association or a port should have a name.
rule ModelioR1540:
    | A BindableInstance’s RepresentedFeature must not refer itself, directly or indirectly.
rule ModelioR1550:
    | If a BinbdableInstance has a type and has a represented feature, the type of the instance must be compatible with the type of this feature.
rule ModelioR1560:
    | Sub classes of an active class must be active.
rule ModelioR1570:
    | A class cannot represent more than one ClassAssociation.
rule ModelioR1580:
    | Attributes, Associations and Operations cannot simultaneously be abstract and class.
rule ModelioR1590:
    | Primitive GeneralClass cannot have associations.
rule ModelioR1600:
    | A primitive class cannot have collaborations.
rule ModelioR1610:
    | A primitive class cannot have state machines.
rule ModelioR1620:
    | A non-abstract Classifier cannot have abstract methods.
rule ModelioR1640:
    | A maximum of one ElementImport must exist between a NameSpace and another NameSpace or between an Operation and a NameSpace.
rule ModelioR1650:
    | An Enumeration cannot be abstract.
rule ModelioR1660:
    | An enumeration is always prilmitive.
rule ModelioR1670:
    | EnumlerationLitteral defined in an Enumeration must have an unique name.
rule ModelioR1680:
    | For a Call-type Event, the ‘Called operation’ field must be defined, whereas the ‘Instanciated signal’ must be empty.
rule ModelioR1690:
    | The ‘Expression’ field for a Change-type Event must be defined, whereas the ‘Called operation’ and ‘Instanciated signal’ fields must be empty.
rule ModelioR1700:
    | The ‘Instantiated signal’ field for a signal-type Event must be defined, whereas the ‘Called operation’ and ‘Expression’ fields must be empty.
rule ModelioR1710:
    | The ‘Expression’ field for a Time-type Event must be defined, whereas the ‘Called operation’ and ‘Instanciated signal’ fields must be empty.
rule ModelioR1720:
    | An abstract NameSpace should only inherit from an abstract NameSpace.
rule ModelioR1730:
    | A generalisation must be created between two model elements of the same type, except in the case of a signal, which can specialize a Signal or a Class.
rule ModelioR1740:
    | An InformationFlow should convey information.
rule ModelioR1750:
    | Repetition of names is forbidden for all AtrributeLinks.
rule ModelioR1760:
    | There cannot be inconsistency in the multiplicities of an Instance
rule ModelioR1780:
    | The name of an Instance must be unique in its NameSpace.
rule ModelioR1790:
    | An instance must have a name, or the instantiation association must be defined.
rule ModelioR1800:
    | If an Operator is of type opt, loop, break or neg, there cannot be more than one Operand.
rule ModelioR1810:
    | An actual Gate on an InteractionUse must reference a formal Gate contained by the referenced Interaction.
rule ModelioR1820:
    | A gate cannot cover a lifeline.
rule ModelioR1830:
    | A PartDecomposition cannot receive ‘create’ or ‘destroy’ messages.
rule ModelioR1860:
    | In an interface, the visibility of all Features must be public.
rule ModelioR1870:
    | An interface cannot be implemented twice by the same class or the same component.
rule ModelioR1910:
    | A Link that instantiates an association must be coherent with this association.
rule ModelioR1950:
    | Messages of type ‘reply’ cannot invoke an Operation.
rule ModelioR1960:
    | A message must have the same name as the invoked Operation.
rule ModelioR1970:
    | A TemplateParameterSubstitution must reference a TemplateParameter.
rule ModelioR1980:
    | The names of a Classifier’s Attributes and AssociationEnds must be unique.
rule ModelioR1990:
    | The name of a Classifier’s inherited Attributes and Roles must be unique.
rule ModelioR2010:
    | In a Dictionary, the name of each element must be unique.
rule ModelioR2030:
    | In a PropertyContainer, the name of each EnumerationPropertyType must be unique.
rule ModelioR2050:
    | Some elements must have a name.
rule ModelioR2060:
    | The name of a NameSpace must be unique in its NameSpace.
rule ModelioR2080:
    | In a PropertySet, the name of each Property must be unique.
rule ModelioR2100:
    | In a EnumerationPropertyType, the name of each PropertyEnumerationLiteral must be unique.
rule ModelioR2120:
    | In a PropertyContainer, the name of each PropertySet must be unique.
rule ModelioR2140:
    | In a PropertyContainer, the name of each PropertyType must be unique.
rule ModelioR2160:
    | In an Analyst Container, the name of each element must be unique.
rule ModelioR2170:
    | The name of a Behavior must be unique in its NameSpace.
rule ModelioR2180:
    | No cycles can exist in a NameSpace inheritance graph.
rule ModelioR2190:
    | A maximum of one generalization may exist between two namespaces.
rule ModelioR2200:
    | A NameSpace cannot both derive and import another NameSpace.
rule ModelioR2210:
    | A leaf NameSpace cannot be derived.
rule ModelioR2220:
    | A leaf NameSpace cannot be abstract.
rule ModelioR2230:
    | A root NameSpace cannot inherit from any other NameSpace.
rule ModelioR2240:
    | There can be no inter-package/inter-component dependency cycle.
rule ModelioR2250:
    | All operations in a Classifier must have a different signature from inherited public and protected operations. Except for constructor, destructor and redefined operations.
rule ModelioR2260:
    | Each Operation in a Classifer must have a different signature.
rule ModelioR2270:
    | All an Operation’s Collaborations must have a different name.
rule ModelioR2330:
    | All an Operation’s Parameters must have a different name.
rule ModelioR2340:
    | A redefined Operation must belong to a parent or an implemented Interface of the owner of the Operation.
rule ModelioR2350:
    | A private Operation cannot be redefined.
rule ModelioR2360:
    | The visibility of an Operation cannot be greater than that of the Operations it redefines.
rule ModelioR2370:
    | A class (static) Operation cannot be redefined.
rule ModelioR2380:
    | An abstract Operation must not redefine a concrete Operation.
rule ModelioR2390:
    | A constructor cannot have return parameters.
rule ModelioR2400:
    | A destructor cannot have any kind of parameters.
rule ModelioR2410:
    | An operation cannot own both ‘create’ and ‘destroy’ stereotypes.
rule ModelioR2420:
    | An Operation must have the same signature as the Operation it redefines.
rule ModelioR2430:
    | All an Operation’s StateMachines must have a different name.
rule ModelioR2440:
    | An Operation cannot belong to an Enumeration.
rule ModelioR2450:
    | A package cannot have inheritance links.
rule ModelioR2470:
    | A maximum of one PackageImport link may exist between a NameSpace and a Package.
rule ModelioR2500:
    | An ‘out’ Parameter cannot have a default value.
rule ModelioR2510:
    | There cannot be any direct link between two Class Ports.
rule ModelioR2520:
    | If a Port runs a delegation towards an internal part, it must provide at least one interface.
rule ModelioR2530:
    | If a Port receives a delegation from an internal part, it must provide at least one interface.
rule ModelioR2540:
    | The interfaces provided by a port must be implemented by the Class that types the Port.
rule ModelioR2550:
    | If a Port is a behavior port, its provided interfaces must be implemented by the Class it belongs to.
rule ModelioR2560:
    | A behavior Port must provide at least one interface.
rule ModelioR2570:
    | If a Port is a behavior port, the type of the port must be either the Class it belongs to or undefined.
rule ModelioR2580:
    | A region cannot contain more than one deep history state.
rule ModelioR2590:
    | A region cannot contains more than one initial state.
rule ModelioR2600:
    | A state machine or a state cannot have two states with the same name.
rule ModelioR2610:
    | Only submachine states can have connection point references.
rule ModelioR2620:
    | Submachine states should not have entry or exit pseudo states defined.
rule ModelioR2630:
    | A region cannot contain more than one shallow history state.
rule ModelioR2640:
    | The context of a state machine cannot be an interface.
rule ModelioR2650:
    | The context of a protocol state machine must be a Classifier.
rule ModelioR2660:
    | A state in a protocol state machine cannot have entry, exit, or do activity actions.
rule ModelioR2670:
    | A protocol state machine cannot have history vertexes.
rule ModelioR2680:
    | The number of parameter of a TaggedValue must be the same as the number of parameter defined in the TaggedValue declaration.
rule ModelioR2690:
    | An element cannot have a TemplateBinding towards itself.
rule ModelioR2700:
    | A TemplateBinding can only substitute each TemplateParameter of the instantiated element once.
rule ModelioR2720:
    | A TemplateBinding must be created between two elements of the same type or between a Class and a DataType.
rule ModelioR2730:
    | A TemplateBinding must substitute all the TemplateParameters of the instanciated template element, and the TemplateParameterSubstitution must be defines in the same order as the TemplateParameters.
rule ModelioR2740:
    | In a TemplateBinding, the TemplateParameterSubstitution must belong to the instantiated template element.
rule ModelioR2750:
    | A transition from a fork or join pseudo state should not have guards or triggers.
rule ModelioR2760:
    | A fork segment must always target a state.
rule ModelioR2770:
    | A join segment must always originate from a state.
rule ModelioR2780:
    | Transitions outgoing pseudostates may not have a trigger (except for those coming out of the initial pseudostate).
rule ModelioR2790:
    | A transition from one region to another in the same immediate enclosing composite state is not allowed.
rule ModelioR2800:
    | An initial vertex can have at most one outgoing transition.
rule ModelioR2810:
    | History vertices can have at most one outgoing transition.
rule ModelioR2820:
    | The target of a transition cannot be an initial vertex.
rule ModelioR2830:
    | The source of a transition cannot be a final vertex.
rule ModelioR2840:
    | A transition should have only one of Processed, Effects, or BehaviorEffet defined.
rule ModelioR2850:
    | An element cannot have a usage dependency towards itself.
rule ModelioR2860:
    | A maximum of one dependency may exist between two use cases.
rule ModelioR2870:
    | There must be no cycle in use cases << extend >> dependency graph.
rule ModelioR2880:
    | There must be no cycle in use cases << include >> dependency graph.
rule ModelioR2890:
    | A communication link cannot have the same actor or use case as its source and target.
rule ModelioR2900:
    | An << extend >> use case dependency must reference at least one extension point.
rule ModelioR2910:
    | An << extend >> use case dependency can only reference the target’s extension points.
rule ModelioR2920:
    | Extension points can only be referenced by an << extend >> use case dependency.
rule ModelioR2930:
    | Message and CommunicationMessage cannot have both Signal and Operation properties defined.
rule ModelioR2940:
    | All transitions incoming a join vertex must originate in different regions of an orthogonal state.
rule ModelioR2950:
    | All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.
rule ModelioR2960:
    | Synonym, antonym, homonym, context, and kind-of dependencies can only link two terms.
rule ModelioR2970:
    | An Assigned dependency must be from an Actor, an Interface, a Package, or a Process, toward a Goal.
rule ModelioR2980:
    | A Measure dependency must be from a ModelElement toward a Goal.
rule ModelioR2990:
    | A Guarantee dependency must be from a Requirement toward a Goal.
rule ModelioR3000:
    | Positive influence and Negative influence dependencies must be between two Goals.
rule ModelioR3010:
    | A refers dependency must be between a Business Rule and a Term.
rule ModelioR3020:
    | A related dependency must be must be between two Business Rules or two Terms.
rule ModelioR3030:
    | A refine dependency must be between either: 1) from a Model Element or a Requirement towards a Requirement 2) from a Business Rule, an Activity or an Operation towards a Business Rule.
rule ModelioR3040:
    | An implement dependency must be from a Process or a Class towards a Business Rule.
rule ModelioR3050:
    | A part dependency must be between two Requirements or between two Goals.
rule ModelioR3060:
    | A satisfy or verify dependency must be from a ModelElement towards a Requirement.
rule ModelioR3070:
    | A derive dependency must be from a UseCase or a Requirement towards a Requirement.
rule ModelioR3080:
    | All FlowNodes should be part of a sequence starting with a StartEvent and finishing with an EndEvent.
rule ModelioR3090:
    | A SequenceFlow cannot have its source or target in different Pools.
rule ModelioR3100:
    | A SequcneFlow in a SubProcess must have its origin and target in the same SubProcess.
rule ModelioR3110:
    | A SequenceFlow cannot target a StartEvent nor have an EndEvent as its source.
rule ModelioR3130:
    | A MessageFlow cannot target a StartEvent or an IntermediateThrowEvent, nor have an EndEvent or an IntermediateCatchEvent as its source.
rule ModelioR3140:
    | All outgoing SequenceFlow from an EventBasedGateway or a ParallelGateway must have its guard properties empty.
rule ModelioR3150:
    | A MessageFlow cannot link two elements in the same lane.
rule ModelioR3160:
    | A MessageFlow cannot have a Gateway as its source or target.
rule ModelioR3170:
    | Inclusive Gateway,Complex Gateway and Parallel Gateway must have at least two outgoing Sequence Flows.
rule ModelioR3180:
    | A FlowElement (and respectively a BaseElement) cannot have a SequenceFlow (respectively a MessageFlow) towards itself.
rule ModelioR3190:
    | A DataAssociation cannot target a DataInput nor have a DataOutput as its source.
rule ModelioR3220:
    | A SequenceFlow outgoing from an EventBasedGateway must target an IntermediaryCatchEvent.
rule ModelioR3230:
    | All SequenceFlows outgoing from an ExclusiveGateway must have a guard, except for the default SequenceFlow.
rule ModelioR3240:
    | There can only be one sequence in a Process, a SubProcess or a Pool.
rule ModelioR3250:
    | A Process, a SubProcess, or a Pool should have at least one StartEvent and one EndEvent.














